version: "3"

services:
  redis:
    image: redis
    environment:
      REDIS_HOST: redis
    networks:
      - back-end
    volumes:
      - redis-data:/data

  db:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
    networks:
      - back-end
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  voteapp:
    build: ./vote
    ports:
      - 8501:8501
    environment:
      REDIS_HOST: redis
    depends_on:
      - redis
    networks:
      - back-end
      - front-end

  resultapp:
    build: ./result
    ports:
      - 3000:3000
    depends_on:
      - db
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - back-end
      - front-end
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  workerapp:
    build: ./worker
    depends_on:
      - db
      - redis
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    networks:
      - back-end
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis-data:
  postgres-data:

networks:
  front-end:
  back-end:
